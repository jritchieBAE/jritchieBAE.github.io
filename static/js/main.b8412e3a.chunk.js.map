{"version":3,"sources":["components/header/Header.js","components/SolutionBox/SolutionBox.js","components/List/List.js","js/parseEuler.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","index_es","position","variant","color","SolutionBox","props","value","id","answers","PlainList","content","map","num","_this","ListItemLink","_this2","this","key","className","onClick","primary","Component","$","require","url","proxyUrl","Scrape","cb","fetch","then","response","text","html","console","log","catch","err","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","update","val","setState","state","components_header_Header","components_SolutionBox_SolutionBox","List_List","target","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+YAkBeA,UAdD,WACV,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAS,UACjBJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,WAAlC,gCCGKC,UATK,SAAAC,GAAK,OACD,MAAfA,EAAMC,MACP,KAEIT,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,eACPF,EAAMC,SCJfE,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,IAyBRC,6MAbXC,QAAU,WACN,OAAOF,EAAQG,IAAI,SAAAC,GAAG,OAAIC,EAAKC,aAAaF,kFATnCA,GAAK,IAAAG,EAAAC,KACd,OACInB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUiB,IAAKL,EAAKM,UAAU,WAAWC,QAAS,kBAAMJ,EAAKV,MAAMc,QAAQP,KAC3Ef,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAckB,UAAU,WAAWE,QAASR,sCAWhD,OACAf,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,iBACPS,KAAKN,kBAlBUW,aCNlBC,EAAIC,EAAQ,KACZC,EAAM,oCAENC,EAAW,uCAkBAC,MAhBjB,SAAgBd,EAAKe,GAEjBC,MADeH,EAAWD,EAAMZ,GAE7BiB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAASG,GACb,IAAMD,EAAOT,EAAE,KAAKU,GACpBC,QAAQC,IAAIH,GACZJ,EAAGI,EAAKA,UAETI,MAAM,SAASC,GACdH,QAAQC,IAAIE,GACZT,EAAG,qBCsBIU,sBA5Bb,SAAAA,EAAYhC,GAAO,IAAAQ,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACjBxB,EAAAyB,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,KAAMX,KAMRc,QAAU,SAACP,GACTC,EAAK8B,OAAO/B,GACZc,EAAOd,EAAKC,EAAK8B,SATA9B,EAYnB8B,OAAS,SAACC,GACRX,QAAQC,IAAIU,GACZ/B,EAAKgC,SAAS,CAACvC,MAAOsC,KAZtB/B,EAAKiC,MAAQ,CACXxC,MAAO,MAHQO,wEAiBV,IAAAE,EAAAC,KACP,OACEnB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,CAAa1C,MAAOU,KAAK8B,MAAMxC,QAC/BT,EAAAC,EAAAC,cAACkD,EAAD,CAAMC,OAAO,cAAc/B,QAAS,SAACyB,GAAD,OAAS7B,EAAKI,QAAQyB,cAxBhDvB,cCIE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.b8412e3a.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Typography, Toolbar} from '@material-ui/core';\nimport './Header.css';\n\nconst Header =() => {\n    return (\n      <div>\n        <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\">\n            Project Euler Solutions\n          </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport './SolutionBox.css'\n\nconst SolutionBox = props => \n        (props.value == null) ?\n        null :\n        (\n            <div id=\"solutionbox\">\n            {props.value}\n            </div>\n        );\n\nexport default SolutionBox;","import React, { Component } from 'react';\nimport {ListItem, ListItemText} from '@material-ui/core'\nimport './List.css';\n\nvar answers = [1,2,3,4,5]\n\nclass PlainList extends Component {\n\n    ListItemLink(num) {\n        return (\n            <ListItem key={num} className=\"listitem\" onClick={() => this.props.onClick(num)}  >\n            <ListItemText className=\"listitem\" primary={num} />\n            </ListItem>\n        );\n    }\n\n    content = () => {\n        return answers.map(num => this.ListItemLink(num));\n    };\n\n    render() \n    {\n        return (\n        <div id=\"solution-list\">\n        {this.content()}\n        </div>\n        )};\n};\n\nexport default PlainList;","const $ = require('cheerio')\nconst url = 'https://projecteuler.net/problem=';\n\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n\nfunction Scrape(num, cb) {\n    var fetchUrl = proxyUrl + url + num\n    fetch(fetchUrl)\n      .then(response => response.text())\n      .then(function(html){\n        const text = $('h2',html)\n        console.log(text)\n        cb(text.text())\n      })\n      .catch(function(err){\n        console.log(err)\n        cb(\"unable to load\")\n      });\n}\n\n\n  export default Scrape","import React, { Component } from 'react';\nimport Header from '../header/Header';\nimport SolutionBox from '../SolutionBox/SolutionBox';\nimport List from '../List/List';\nimport Scrape from '../../js/parseEuler'\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null\n    }\n  }\n\n  onClick = (num) => {\n    this.update(num)\n    Scrape(num, this.update)\n  }\n\n  update = (val) => {\n    console.log(val);\n    this.setState({value: val})\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <SolutionBox value={this.state.value}/>\n        <List target=\"solutionbox\" onClick={(val) => this.onClick(val)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}